{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/Character/Character.js","webpack:///./src/js/Character/Enemy.js","webpack:///./src/js/Character/HealthBar.js","webpack:///./src/js/Constants/CompoundWordList.js","webpack:///./src/js/Constants/Vocabulary.js","webpack:///./src/js/Constants/animals.js","webpack:///./src/js/Constants/carsLogoClassNames.js","webpack:///./src/js/Constants/characterClassList.js","webpack:///./src/js/Constants/countries.js","webpack:///./src/js/Constants/excessTaskClasses.js","webpack:///./src/js/Constants/namesCollection.js","webpack:///./src/js/Constants/sentencesTask.js","webpack:///./src/js/Controllers/BattleFieldController.js","webpack:///./src/js/Controllers/GameConfig.js","webpack:///./src/js/Controllers/GameController.js","webpack:///./src/js/Scenes/Score.js","webpack:///./src/js/Scenes/StartPage.js","webpack:///./src/js/Tasks/AnimalsNamesTask.js","webpack:///./src/js/Tasks/CapitalsTask.js","webpack:///./src/js/Tasks/CarsLogoTask.js","webpack:///./src/js/Tasks/ComparisionAnimalsTask.js","webpack:///./src/js/Tasks/ComparisionMathTask.js","webpack:///./src/js/Tasks/CompoundWordsTask.js","webpack:///./src/js/Tasks/CountriesTask.js","webpack:///./src/js/Tasks/ExcessItemTask.js","webpack:///./src/js/Tasks/ListeningTask.js","webpack:///./src/js/Tasks/MathTask.js","webpack:///./src/js/Tasks/SentencesGrammarTask.js","webpack:///./src/js/Tasks/SortableLettersTask.js","webpack:///./src/js/Tasks/SortableNumbersTask.js","webpack:///./src/js/Tasks/SquareTask.js","webpack:///./src/js/Tasks/Task.js","webpack:///./src/js/Tasks/TranslationTask.js","webpack:///./src/js/Tasks/bundleTasks.js","webpack:///./src/js/app.js","webpack:///./src/style/bundle.css"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,0DAA0D,aAAa;AACvE,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AC9FA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,yCAAyC,GAAG,+BAA+B,GAAG,+BAA+B;AACpI;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;;;;;;;;;;;;ACtBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0E;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;;ACzzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;;;;;;;AC5FA;AACA;AACA,C;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACfA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,WAAW;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,4CAA4C;AAC7E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B,SAAS;AACT;AACA;;AAEA,sF;;;;;;;;;;;;ACzEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wD;AACA;;AAEA;AACA;AACA;AACA,8B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,2E;;;;;;;;;;;;ACtHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+E;;;;;;;;;;;;AC5IA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sE;;;;;;;;;;;;AC3CA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,gF;;;;;;;;;;;;;;;;ACpDA;AACkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,4C;;;;;;;;;;;;;;;;ACpCA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,oC;;;;;;;;;;;;;;;;AC7BA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,oC;;;;;;;;;;;;;;;;ACjDA;AACkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,mD;;;;;;;;;;;;;;;AC7CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;ACnCoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,8C;;;;;;;;;;;;;;;;AC7EA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sC;;;;;;;;;;;;;;;;ACnCA;AACsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wC;;;;;;;;;;;;;;;ACjDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,sC;;;;;;;;;;;;;;;AClCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;;;;;;;;;;;;;;;;;AC3DA;AACoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+C;;;;;;;;;;;;;;;AC1EA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kD;;;;;;;;;;;;;;;ACxEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gD;;;;;;;;;;;;;;;ACjFA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8C;AACA;;AAEA;AACA;AACA;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW;AACvF;AACA;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW;AACvF;AACA;AACA;AACA,uDAAuD,WAAW,SAAS,YAAY;AACvF;AACA,sB;AACA;AACA,uDAAuD,YAAY,SAAS,WAAW,SAAS,YAAY;AAC5G;AACA,sB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,gC;;;;;;;;;;;;;;ACvEqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,qE;;;;;;;;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BoB;AACI;AACL;AACO;AACJ;AACF;AACH;AACE;AACU;AACR;AACF;AACM;AACH;AACE;;;;;;;;;;;;;;;;;;;;;;;;;;ACbxB;AACA;AACA;AACA;AACA;AACA;AACqB;AACrB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,yD;;;;;;;;;;;AC1BA,uC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/app.js\");\n","import HealthBar from \"./HealthBar\";\r\n\r\nclass Character {\r\n    constructor() {\r\n        this.faceId = 0;\r\n        this.styleId = 0;\r\n        this.gunId = 0;\r\n        this.health = 100;\r\n        this.gunShotSound = document.getElementById('gun-shot-sound');\r\n        this.throwSound = document.getElementById('throw-sound');\r\n    }\r\n\r\n    createFigure () {\r\n        let figure = document.createElement('div');\r\n        this.head = document.createElement('div');\r\n        this.face = document.createElement('div');\r\n        this.hair = document.createElement('div');\r\n        this.body = document.createElement('div');\r\n        this.head.classList.add('head');\r\n        this.face.classList.add('face', `face-${this.faceId}`);\r\n        this.hair.classList.add('hairstyle', `hairstyle-${this.styleId}`);\r\n        this.body.classList.add('body-with-gun', `body-${this.gunId}`);\r\n        this.head.appendChild(this.face);\r\n        this.head.appendChild(this.hair);\r\n        figure.appendChild(this.head);\r\n        figure.appendChild(this.body);\r\n        return figure;\r\n    }\r\n\r\n    createHealthBar(className) {\r\n        if (!this.healthBar) {\r\n            this.healthBar = new HealthBar(className);\r\n        } else {\r\n            this.renderHealthBar();\r\n        }\r\n    }\r\n\r\n    renderHealthBar() {\r\n        this.healthBar.render(this.health);\r\n    }\r\n\r\n    attack(attackType) {\r\n        if (attackType === 'shot') {\r\n            this.body.className = 'body-shooter';\r\n            this.head.className = 'head';\r\n            this.body.classList.add(`body-${this.gunId}`);\r\n            setTimeout(() => {\r\n                this.gunShotSound.play();\r\n                this.body.classList.add('body-attack-shot-anim');\r\n                this.head.classList.add('head-attack-shot-anim');\r\n            }, 3000)\r\n        } else if (attackType === 'throw') {\r\n            this.body.className = 'body-free-hands';\r\n            this.head.className = 'head';\r\n            this.ball.className = 'throwableObj';\r\n            setTimeout(() => {\r\n                this.throwSound.play();\r\n                this.body.classList.add('body-attack-throw-anim');\r\n                this.head.classList.add('head-attack-throw-anim');\r\n                this.ball.classList.add('potato-correct-throw-anim');\r\n            }, 3000)\r\n        }\r\n    }\r\n\r\n    takeAttack(attackType) {\r\n        this.health = this.health - 25;\r\n        if (attackType === 'shot') {\r\n            this.body.className = 'body-free-hands';\r\n            this.head.className = 'head';\r\n            setTimeout(() => {\r\n                if (this.health) {\r\n                    this.body.classList.add('body-opponent-shot-anim');\r\n                    this.head.classList.add('head-opponent-shot-anim');\r\n                } else {\r\n                    this.body.classList.add('body-opponent-final-shot');\r\n                    this.head.classList.add('head-opponent-final-shot');\r\n                }\r\n            }, 3000);\r\n        } else if (attackType === 'throw') {\r\n            this.body.className = 'body-free-hands';\r\n            this.head.className = 'head';\r\n            setTimeout(() => {\r\n                if (this.health) {\r\n                    this.body.classList.add('body-opponent-throw-anim');\r\n                    this.head.classList.add('head-opponent-throw-anim');\r\n                } else {\r\n                    this.body.classList.add('body-opponent-final-throw');\r\n                    this.head.classList.add('head-opponent-final-throw');\r\n                }\r\n            }, 3000);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Character;","import Character from \"./Character\";\r\n\r\nclass Enemy extends Character {\r\n    constructor(names) {\r\n        super();\r\n        this.namesList = names;\r\n    }\r\n\r\n    generateName() {\r\n        let adjectiveIndex = Math.floor(Math.random() * this.namesList.adjective.length);\r\n        let nounIndex = Math.floor(Math.random() * this.namesList.noun.length);\r\n        let nameIndex = Math.floor(Math.random() * this.namesList.name.length);\r\n        this.name = `${this.namesList.adjective[adjectiveIndex]} ${this.namesList.noun[nounIndex]} ${this.namesList.name[nameIndex]}`;\r\n    }\r\n\r\n    generateLook() {\r\n        this.faceId = Math.floor(Math.random() * 8);\r\n        this.styleId = Math.floor(Math.random() * 8);\r\n        this.gunId = Math.floor(Math.random() * 4);\r\n    }\r\n}\r\n\r\nexport default Enemy;","class HealthBar {\r\n    constructor(className) {\r\n        this.canvas = document.createElement('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.canvas.classList.add('bar', className);\r\n        this.container = document.getElementById('health-bar');\r\n        this.container.appendChild(this.canvas);\r\n    }\r\n\r\n    render(health = 100) {\r\n        this.canvas.width = this.canvas.width\r\n        this.ctx.fillStyle = \"lightgrey\";\r\n        this.ctx.fillRect(0, 0, this.canvas.width * health / 100, this.canvas.height);\r\n    }\r\n}\r\n\r\nexport default HealthBar; ","export const WORD_LIST = [\r\n    {\r\n        start: 'foot',\r\n        end: 'ball',\r\n        full: 'football'\r\n    },\r\n    {\r\n        start: 'sea',\r\n        end: 'shell',\r\n        full: 'seashell'\r\n    },\r\n    {\r\n        start: 'wood',\r\n        end: 'pecker',\r\n        full: 'woodpecker'\r\n    },\r\n    {\r\n        start: 'butter',\r\n        end: 'fly',\r\n        full: 'butterfly'\r\n    },\r\n    {\r\n        start: 'table',\r\n        end: 'ware',\r\n        full: 'tableware'\r\n    },\r\n    {\r\n        start: 'fire',\r\n        end: 'works',\r\n        full: 'fireworks'\r\n    },\r\n    {\r\n        start: 'sub',\r\n        end: 'way',\r\n        full: 'subway'\r\n    },\r\n    {\r\n        start: 'back',\r\n        end: 'bone',\r\n        full: 'backbone'\r\n    },\r\n    {\r\n        start: 'jack',\r\n        end: 'pot',\r\n        full: 'jackpot'\r\n    },\r\n    {\r\n        start: 'pass',\r\n        end: 'port',\r\n        full: 'passport'\r\n    },\r\n    {\r\n        start: 'for',\r\n        end: 'get',\r\n        full: 'forget'\r\n    },\r\n    {\r\n        start: 'key',\r\n        end: 'board',\r\n        full: 'keyboard'\r\n    },\r\n    {\r\n        start: 'touch',\r\n        end: 'down',\r\n        full: 'touchdown'\r\n    },\r\n    {\r\n        start: 'pick',\r\n        end: 'up',\r\n        full: 'pickup'\r\n    },\r\n    {\r\n        start: 'book',\r\n        end: 'case',\r\n        full: 'bookcase'\r\n    },\r\n    {\r\n        start: 'week',\r\n        end: 'end',\r\n        full: 'weekend'\r\n    },\r\n    {\r\n        start: 'fore',\r\n        end: 'hand',\r\n        full: 'forehand'\r\n    },\r\n    {\r\n        start: 'under',\r\n        end: 'dog',\r\n        full: 'underdog'\r\n    },\r\n    {\r\n        start: 'air',\r\n        end: 'field',\r\n        full: 'airfield'\r\n    },\r\n    {\r\n        start: 'brain',\r\n        end: 'child',\r\n        full: 'brainchild'\r\n    },\r\n    {\r\n        start: 'rain',\r\n        end: 'bow',\r\n        full: 'rainbow'\r\n    },\r\n    {\r\n        start: 'car',\r\n        end: 'go',\r\n        full: 'cargo'\r\n    },\r\n    {\r\n        start: 'bed',\r\n        end: 'rock',\r\n        full: 'bedrock'\r\n    },\r\n    {\r\n        start: 'sand',\r\n        end: 'lot',\r\n        full: 'sandlot'\r\n    }\r\n] ","export const VOCABULARY = [\r\n    {\r\n        word: 'street',\r\n        translation: ['улица', 'деловой', 'улочка']\r\n    },\r\n    {\r\n        word: 'company',\r\n        translation: ['компания', 'фирма', 'общество', 'товарищество']\r\n    },\r\n    {\r\n        word: 'number',\r\n        translation: ['номер', 'количество', 'число', 'цифра', 'сумма']\r\n    },\r\n    {\r\n        word: 'world',\r\n        translation: ['мир', 'свет', 'вселенная', 'общество', 'царство', 'кругозор']\r\n    },\r\n    {\r\n        word: 'house',\r\n        translation: ['дом', 'жилище', 'театр', 'здание', 'палата', 'гостиница']\r\n    },\r\n    {\r\n        word: 'woman',\r\n        translation: ['женщина', 'баба', 'служанка', 'любовница', 'уборщица']\r\n    },\r\n    {\r\n        word: 'people',\r\n        translation: ['люди', 'народ', 'жители', 'население', 'нация', 'служащие']\r\n    },\r\n    {\r\n        word: 'place',\r\n        translation: ['место', 'местечко', 'город', 'положение', 'площадь', 'жилище']\r\n    },\r\n    {\r\n        word: 'school',\r\n        translation: ['школа', 'обучение', 'направление', 'занятия в школе', 'класс']\r\n    },\r\n    {\r\n        word: 'country',\r\n        translation: ['страна', 'местность', 'родина', 'деревня', 'отечество', 'территория']\r\n    },\r\n    {\r\n        word: 'point',\r\n        translation: ['точка', 'балл', 'пункт', 'момент', 'очко', 'дело']\r\n    },\r\n    {\r\n        word: 'family',\r\n        translation: ['семья', 'семейство', 'род', 'содружество']\r\n    },\r\n    {\r\n        word: 'power',\r\n        translation: ['власть', 'мощность', 'сила', 'мощь', 'энергия', 'способность']\r\n    },\r\n    {\r\n        word: 'money',\r\n        translation: ['деньги', 'денежные суммы', 'богатство', 'монетные валюты']\r\n    },\r\n    {\r\n        word: 'market',\r\n        translation: ['рынок', 'базар', 'торговля', 'спрос', 'сбыт', 'магазин']\r\n    },\r\n    {\r\n        word: 'report',\r\n        translation: ['доклад', 'отчет', 'сообщение', 'рапорт', 'репортаж', 'донесение']\r\n    },\r\n    {\r\n        word: 'friend',\r\n        translation: ['друг', 'подруга', 'приятель', 'знакомый', 'товарищ', 'приятельница']\r\n    },\r\n    {\r\n        word: 'parent',\r\n        translation: ['родитель', 'предок', 'родительница', 'причина', 'праотец', 'приемный отец']\r\n    },\r\n    {\r\n        word: 'person',\r\n        translation: ['человек', 'лицо', 'личность', 'особа', 'персонаж', 'субъект']\r\n    },\r\n    {\r\n        word: 'reason',\r\n        translation: ['причина', 'повод', 'основание', 'разум', 'рассудок', 'довод']\r\n    },\r\n    {\r\n        word: 'morning',\r\n        translation: ['утро', 'утренняя заря', 'начало', 'ранний период']\r\n    },\r\n    {\r\n        word: 'figure',\r\n        translation: ['рисунок', 'цифра', 'фигура', 'диаграмма', 'образ', 'личность']\r\n    },\r\n    {\r\n        word: 'price',\r\n        translation: ['цена', 'расценка', 'ценность', 'жертва']\r\n    },\r\n    {\r\n        word: 'support',\r\n        translation: ['поддержка', 'помощь', 'опора', 'подставка', 'суппорт', 'кронштейн']\r\n    },\r\n    {\r\n        word: 'health',\r\n        translation: ['здоровье', 'самочувствие', 'здравие', 'жизнеспособность', 'благосостояние']\r\n    },\r\n    {\r\n        word: 'field',\r\n        translation: ['поле', 'область', 'месторождение', 'пространство', 'поприще']\r\n    },\r\n    {\r\n        word: 'example',\r\n        translation: ['пример', 'образец', 'экземпляр', 'урок']\r\n    },\r\n    {\r\n        word: 'action',\r\n        translation: ['действие', 'акция', 'деятельность', 'воздействие', 'поступок', 'результат', 'эффект', 'поведение', 'влияние']\r\n    },\r\n    {\r\n        word: 'paper',\r\n        translation: ['бумага', 'документ', 'обои']\r\n    },\r\n    {\r\n        word: 'table',\r\n        translation: ['стол', 'таблица', 'расписание', 'доска', 'трапеза', 'плита']\r\n    },\r\n    {\r\n        word: 'animal',\r\n        translation: ['животное', 'зверь', 'скотина']\r\n    },\r\n    {\r\n        word: 'picture',\r\n        translation: ['рисунок', 'картина', 'изображение', 'картинка', 'представление', 'образ']\r\n    },\r\n    {\r\n        word: 'child',\r\n        translation: ['ребенок', 'дитя', 'сын', 'малыш', 'младенец', 'потомок']\r\n    },\r\n    {\r\n        word: 'horse',\r\n        translation: ['лошадь', 'конь', 'конница', 'кавалерия', 'козлы', 'рама', 'лошадка']\r\n    },\r\n    {\r\n        word: 'color',\r\n        translation: ['цвет', 'краска', 'колорит', 'оттенок', 'свет', 'тон']\r\n    },\r\n    {\r\n        word: 'summer',\r\n        translation: ['лето', 'год', 'балка']\r\n    },\r\n    {\r\n        word: 'letter',\r\n        translation: ['письмо', 'буква', 'символ', 'послание', 'литера', 'шрифт']\r\n    },\r\n    {\r\n        word: 'river',\r\n        translation: ['река', 'поток', 'речка']\r\n    },\r\n    {\r\n        word: 'potato',\r\n        translation: ['картофель', 'картошка', 'картофелина', 'дырка']\r\n    },\r\n    {\r\n        word: 'mouse',\r\n        translation: ['мышь', 'мышка', 'мышонок']\r\n    },\r\n    {\r\n        word: 'sugar',\r\n        translation: ['сахар', 'сахарок']\r\n    },\r\n    {\r\n        word: 'window',\r\n        translation: ['окно', 'окошко', 'витрина']\r\n    }\r\n]","export const ANIMALS = [\r\n    {\r\n        className: 'malamute',\r\n        name: [\r\n            'dog', 'malamute', 'собака'\r\n        ],\r\n        topSpeed: 50\r\n    },\r\n    {\r\n        className: 'bear',\r\n        name: [\r\n            'bear', 'медведь'\r\n        ],\r\n        topSpeed: 56\r\n    },\r\n    {\r\n        className: 'tiger',\r\n        name: [\r\n            'tiger', 'тигр'\r\n        ],\r\n        topSpeed: 96\r\n    },\r\n    {\r\n        className: 'camel',\r\n        name: [\r\n            'camel', 'верблюд'\r\n        ],\r\n        topSpeed: 64\r\n    },\r\n    {\r\n        className: 'fox',\r\n        name: [\r\n            'fox', 'лиса'\r\n        ],\r\n        topSpeed: 48\r\n    },\r\n    {\r\n        className: 'horse',\r\n        name: [\r\n            'horse', 'лошадь'\r\n        ],\r\n        topSpeed: 66\r\n    },\r\n    {\r\n        className: 'lion',\r\n        name: [\r\n            'lion', 'лев'\r\n        ],\r\n        topSpeed: 58\r\n    },\r\n    {\r\n        className: 'chicken',\r\n        name: [\r\n            'chicken', 'цыпленок', 'цыплята', 'курица'\r\n        ],\r\n        topSpeed: 5\r\n    },\r\n    {\r\n        className: 'corgi',\r\n        name: [\r\n            'dog', 'corgi', 'собака'\r\n        ],\r\n        topSpeed: 8\r\n    },\r\n    {\r\n        className: 'cow',\r\n        name: [\r\n            'cow', 'корова'\r\n        ],\r\n        topSpeed: 40\r\n    },\r\n    {\r\n        className: 'crab',\r\n        name: [\r\n            'crab', 'краб'\r\n        ],\r\n        topSpeed: 18\r\n    },\r\n    {\r\n        className: 'pig',\r\n        name: [\r\n            'pig', 'minipig', 'поросенок', 'свинья'\r\n        ],\r\n        topSpeed: 17\r\n    },\r\n    {\r\n        className: 'york',\r\n        name: [\r\n            'dog', 'york', 'собака'\r\n        ],\r\n        topSpeed: 9\r\n    },\r\n]","export const CLASS_NAMES = [\r\n    'audi', 'bentley', 'honda', 'hyundai', 'jaguar', 'lexus', 'mercedes', 'suzuki', 'tesla', 'toyota', 'volkswagen'\r\n]","export const CLASS_LIST = {\r\n    faces: [\r\n        'face-0', 'face-1', 'face-2', 'face-3', \r\n        'face-4', 'face-5', 'face-6', 'face-7'\r\n    ],\r\n    hairstyles: [\r\n        'hairstyle-0', 'hairstyle-1', 'hairstyle-2', 'hairstyle-3', \r\n        'hairstyle-4', 'hairstyle-5', 'hairstyle-6', 'hairstyle-7'\r\n    ],\r\n    guns: [\r\n        'gun-0', 'gun-1', 'gun-2', 'gun-3'\r\n    ]\r\n}","export const COUNTRIES = [\r\n    {\r\n        country: ['belarus', 'беларусь'],\r\n        capital: ['minsk', 'минск'],\r\n        className: 'belarus-flag'\r\n    },\r\n    {\r\n        country: ['russia', 'россия'],\r\n        capital: ['Moscow', 'москва'],\r\n        className: 'russia-flag'\r\n    },\r\n    {\r\n        country: ['usa', 'сша', 'united states'],\r\n        capital: ['washington', 'вашингтон'],\r\n        className: 'usa-flag'\r\n    },\r\n    {\r\n        country: ['finland', 'финляндия'],\r\n        capital: ['helsinki', 'хельсинки'],\r\n        className: 'finland-flag'\r\n    },\r\n    {\r\n        country: ['italy', 'италия'],\r\n        capital: ['rome', 'рим'],\r\n        className: 'italy-flag'\r\n    },\r\n    {\r\n        country: ['norway', 'норвегия'],\r\n        capital: ['oslo', 'осло'],\r\n        className: 'norway-flag'\r\n    },\r\n    {\r\n        country: ['france', 'франция'],\r\n        capital: ['paris', 'париж'],\r\n        className: 'france-flag'\r\n    },\r\n    {\r\n        country: ['ukraine', 'украина'],\r\n        capital: ['kiev', 'киев'],\r\n        className: 'ukraine-flag'\r\n    },\r\n    {\r\n        country: ['poland', 'польша'],\r\n        capital: ['warsaw', 'варшава'],\r\n        className: 'poland-flag'\r\n    },\r\n    {\r\n        country: ['germany', 'германия'],\r\n        capital: ['berlin', 'берлин'],\r\n        className: 'germany-flag'\r\n    },\r\n    {\r\n        country: ['sweden', 'швеция'],\r\n        capital: ['stockholm', 'стокгольм'],\r\n        className: 'sweden-flag'\r\n    },\r\n    {\r\n        country: ['japan', 'япония'],\r\n        capital: ['tokio', 'токио'],\r\n        className: 'japan-flag'\r\n    }\r\n]\r\n\r\n","export const CLASS_NAMES = [\r\n    [\r\n        'apple', 'apricot', 'banana', 'kiwi', 'lemon', 'orange', 'peach', 'pear'\r\n    ],\r\n    [\r\n        'tomato', 'cabbage', 'corn', 'cucumber', 'eggplant', 'onion', 'pepper', 'pumpkin'\r\n    ]\r\n]\r\n\r\n\r\n","const NAMES_COLLECTION = {\r\n    adjective: [\r\n        'Misty', 'Royal', 'Brave', 'Fast', 'Vengeful', 'Spitfire', 'Nuclear', 'Crazy', 'Nuts', 'Screwy'\r\n    ],\r\n    noun: [\r\n        'Doctor', 'Clown', 'Peasant', 'Griffin', 'Ghost', 'Maniac', 'Killer', 'Gangster', 'Hooligan', 'Vandal'\r\n    ],\r\n    name: [\r\n        'Johnny', 'David', 'Carlos', 'Pedro', 'Eddie', 'Billy', 'Henry', 'Alexis', 'Isaac', 'Bruce'\r\n    ]\r\n};\r\n\r\nexport default NAMES_COLLECTION;\r\n\r\n","export const SENTENCES = [\r\n    'I brush my teeth every day',\r\n    'I always close the window at night',\r\n    'The sun rises in the east',\r\n    'I went to Belarus two years ago',\r\n    'Will you be my friend?',\r\n    'I will tell you the whole story',\r\n    'They are moving to the other city',\r\n    'My mother was cooking at the morning',\r\n    'We have known each other since school years',\r\n    'By the end of the year she had learned to cook',\r\n    'I will have translated the article by noon',\r\n    'We have lived here since 1975',\r\n    'He often came here',\r\n    'I was cooking when the phone rang'\r\n]","class BattleFieldController {\r\n    constructor(score) {\r\n        this.score = score;\r\n        this.battlePage = document.getElementById('battle-field');\r\n        this.playerNameField = document.getElementById('player-name');\r\n        this.opponentNameField = document.getElementById('opponent-name');\r\n        this.levelField = document.getElementById('game-level');\r\n        this.gameResultPage = document.getElementById('game-result-page'); \r\n        this.winGameWindow = document.getElementById('win-game-window');\r\n        this.loseGameWindow = document.getElementById('lose-game-window');\r\n        this.scoreContainer = document.getElementById('score-container');\r\n        this.solvedTasksElement = document.getElementById('final-score-task');\r\n        this.amountOfVictories = document.getElementById('number-of-victories');\r\n    }\r\n\r\n    init(locationId) {\r\n        this.battlePage.className = 'battle-field';\r\n        this.battlePage.classList.add(`${locationId}-location`);\r\n    }\r\n\r\n    render(player, opponent) {\r\n        if (this.opponentFigure) {\r\n            this.battlePage.removeChild(this.playerFigure);\r\n            this.battlePage.removeChild(this.opponentFigure);\r\n        };\r\n        this.createPlayer(player);\r\n        this.createEnemy(opponent);\r\n    }\r\n\r\n    createPlayer(player) {\r\n        this.player = player;\r\n        this.playerFigure = this.player.createFigure();\r\n        this.playerFigure.classList.add('player-container');\r\n        this.player.ball = document.createElement('div');\r\n        this.player.ball.classList.add('throwableObj');\r\n        this.playerNameField.textContent = this.player.name;\r\n        this.playerFigure.appendChild(this.player.ball);\r\n        this.battlePage.appendChild(this.playerFigure);\r\n        this.player.renderHealthBar();\r\n    }\r\n\r\n    createEnemy(opponent) {\r\n        this.opponent = opponent;\r\n        this.opponent.health = 100;\r\n        this.opponentFigure = this.opponent.createFigure();\r\n        this.opponentFigure.classList.add('opponent-container');\r\n        this.opponent.ball = document.createElement('div');\r\n        this.opponent.ball.classList.add('throwableObj');\r\n        this.opponentNameField.textContent = this.opponent.name;\r\n        this.levelField.textContent = this.opponent.level;\r\n        this.opponentFigure.appendChild(this.opponent.ball);\r\n        this.battlePage.appendChild(this.opponentFigure);\r\n        this.opponent.renderHealthBar();\r\n    }\r\n\r\n    showScoreWindow(level, solvedTasks) {\r\n        this.solvedTasksElement.textContent = solvedTasks;\r\n        this.amountOfVictories.textContent = level - 1;\r\n        this.score.refreshScore({name: this.player.name, result: solvedTasks});\r\n        this.score.showScore(this.scoreContainer);\r\n    }\r\n\r\n    showFinalWindow(result, level, solvedTasks) {\r\n        setTimeout(() => {\r\n            if (level) {\r\n                this.showScoreWindow(level, solvedTasks);\r\n            };\r\n            this.gameResultPage.classList.remove('hidden');\r\n            this[`${result}GameWindow`].classList.remove('hidden');\r\n        }, 1000);\r\n    }\r\n}\r\n\r\nexport default BattleFieldController;","class GameConfig {\r\n    constructor(player, classes, gameController) {\r\n        this.player = player;\r\n        this.classList = classes;\r\n        this.GameController = gameController;\r\n        this.selectLocationPage = document.getElementById('location-select');\r\n        this.playerConfigPage = document.getElementById('config-page');\r\n        this.faceContainer = document.getElementById('face-container');\r\n        this.styleContainer = document.getElementById('style-container');\r\n        this.gunContainer = document.getElementById('gun-container');\r\n        this.playerFigure = document.getElementById('player-figure');\r\n        this.nameInput = document.getElementById('player-name-input');\r\n        document.addEventListener('click', (e) => this.changeConfig(e));\r\n    }\r\n\r\n    init() {\r\n        this.createPlayerConfigPage();\r\n    }\r\n\r\n    selectLocation(e) {\r\n        this.locationId = e.target.id;\r\n        this.showPlayerConfigPage();\r\n    }\r\n\r\n    showPlayerConfigPage() {\r\n        this.playerConfigPage.classList.remove('hidden');\r\n        this.selectLocationPage.classList.add('hidden');    \r\n    }\r\n\r\n    createPlayerConfigPage() {\r\n        this.createFaceItems();\r\n        this.createStyleItems();\r\n        this.createGunItems();    \r\n        this.renderPlayerFigure();\r\n    }\r\n\r\n    createFaceItems() {\r\n        const faceList = document.createElement('div');\r\n        faceList.classList.add('config-section');\r\n        this.classList.faces.forEach((item, index) => {\r\n            let face = document.createElement('div');\r\n            face.classList.add('config-item-image', item);\r\n            face.dataset.itemId = index;\r\n            face.dataset.itemType = 'face';\r\n            faceList.appendChild(face);\r\n        });\r\n        this.faceContainer.appendChild(faceList);\r\n    }\r\n\r\n    createStyleItems() {\r\n        const styleList = document.createElement('div');\r\n        styleList.classList.add('config-section');\r\n        this.classList.hairstyles.forEach((item, index) => {\r\n            let style = document.createElement('div');\r\n            style.classList.add('config-item-image', item);\r\n            style.dataset.itemId = index;\r\n            style.dataset.itemType = 'style';\r\n            styleList.appendChild(style);\r\n        });\r\n        this.styleContainer.appendChild(styleList);\r\n    }\r\n\r\n    createGunItems() {\r\n        const gunList = document.createElement('div');\r\n        gunList.classList.add('config-section');\r\n        this.classList.guns.forEach((item, index) => {\r\n            let gun = document.createElement('div');\r\n            gun.classList.add('config-item-image', item);\r\n            gun.dataset.itemId = index;\r\n            gun.dataset.itemType = 'gun';\r\n            gunList.appendChild(gun);\r\n        });\r\n        this.gunContainer.appendChild(gunList);\r\n    }\r\n\r\n    renderPlayerFigure() {\r\n        this.playerFigure.innerHTML = '';\r\n        let figure = this.player.createFigure();\r\n        figure.classList.add('player-figure-demo');\r\n        this.playerFigure.appendChild(figure);\r\n    }\r\n\r\n    changeConfig(e) {\r\n        let configType = e.target.dataset.itemType;\r\n        if (e.target.id === 'submit-button') {\r\n            this.compileConfig();\r\n        } else if (e.target.classList.contains('location-item')) {\r\n            this.selectLocation(e);\r\n        }\r\n        switch (configType) {\r\n            case 'face':  \r\n                this.player.faceId = e.target.dataset.itemId;\r\n                this.renderPlayerFigure()\r\n                break;\r\n            case 'style': \r\n                this.player.styleId = e.target.dataset.itemId;\r\n                this.renderPlayerFigure()\r\n                break;\r\n            case 'gun': \r\n                this.player.gunId = e.target.dataset.itemId;\r\n                this.renderPlayerFigure()\r\n                break;\r\n        }\r\n    }\r\n\r\n    compileConfig() {\r\n        if (this.nameInput.value) {\r\n            this.player.name = this.nameInput.value;\r\n            this.playerConfigPage.classList.add('hidden');            \r\n            this.GameController.init(this.player, this.locationId);\r\n            this.GameController.initGame();\r\n            this.nameInput.value = \"\";\r\n        } else {\r\n            this.nameInput.classList.add('empty-input')\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameConfig; ","class GameController {\r\n    constructor(battleField, enemy, tasks) {\r\n        this.battlefield = battleField;\r\n        this.opponent = enemy;\r\n        this.tasksList = tasks;\r\n        this.task = null;\r\n        this.activeAttack = false;\r\n        this.startPage = document.getElementById('start-page');\r\n        this.attackConfigPage = document.getElementById('attack-config-page');\r\n        this.attackTypeWindow = document.getElementById('attack-type');\r\n        this.taskTypeWindow = document.getElementById('task-type');\r\n        this.attackButton = document.getElementById('attack-button');\r\n        this.taskSection = document.getElementById('task-field');\r\n        document.addEventListener('click', (e) => this.handleEvents(e));\r\n        document.addEventListener('keydown', (e) => this.keyboardControl(e));\r\n        \r\n    }\r\n\r\n    init(player, location) {\r\n        this.level = 1;\r\n        this.solvedTasks = 0;\r\n        this.player = player;\r\n        this.gameStatus = null;\r\n        this.player.createHealthBar('player-health-bar');\r\n        this.opponent.createHealthBar('opponent-health-bar');\r\n        this.battlefield.init(location);\r\n    }\r\n\r\n    initGame() {\r\n        this.createOpponent();\r\n        this.battlefield.render(this.player, this.opponent);\r\n    }\r\n\r\n    handleEvents(e) {\r\n        if (e.target.id === 'attack-button' && !this.activeAttack) {\r\n            this.startAttack(e);\r\n        } else if (e.target.id === 'next-game-button') {\r\n            this.startNextRound();\r\n        } else if (e.target.classList.contains('exit-button')) {\r\n            this.exitToMenu(e);\r\n        } else if (e.target.classList.contains('attack-type-item')) {\r\n            this.selectAttackType(e)\r\n        } else if (e.target.classList.contains('task-type-item')) {\r\n            this.selectTaskType(e)\r\n        } else if (e.target.id === 'check-result') {\r\n            this.checkAnswer();\r\n        }\r\n    }\r\n\r\n    keyboardControl(e) {\r\n        if (e.keyCode === 13 && !this.taskSection.classList.contains('hidden')) {\r\n            this.checkAnswer();\r\n        }\r\n    }\r\n\r\n    startAttack (e) {\r\n        this.attackConfigPage.classList.remove('hidden');\r\n        e.target.classList.contains('attack-button-animation') ? e.target.classList.remove('attack-button-animation') : null;\r\n    }\r\n\r\n    startNextRound () {\r\n        this.level++;\r\n        this.initGame();\r\n        this.battlefield.gameResultPage.classList.add('hidden');\r\n        this.battlefield.winGameWindow.classList.add('hidden');\r\n    }\r\n\r\n    exitToMenu (e) {\r\n        let resultWindow = `${this.gameStatus}GameWindow`;\r\n        this.battlefield.gameResultPage.classList.add('hidden');\r\n        this.battlefield[resultWindow].classList.add('hidden');\r\n        this.battlefield.battlePage.classList.add('hidden');\r\n        this.startPage.classList.remove('hidden');\r\n        this.player.health = 100;\r\n    }\r\n\r\n    createOpponent() {\r\n        this.opponent.level = this.level;\r\n        this.opponent.generateName();\r\n        this.opponent.generateLook();\r\n    }\r\n\r\n    selectAttackType(e) {\r\n        this.attackType = e.target.id;\r\n        this.attackTypeWindow.classList.add('hidden');\r\n        this.taskTypeWindow.classList.remove('hidden');\r\n    }\r\n\r\n    selectTaskType(e) {\r\n        this.attackConfigPage.classList.add('hidden');\r\n        this.attackTypeWindow.classList.remove('hidden');\r\n        this.taskTypeWindow.classList.add('hidden');\r\n        this.task = this.tasksList[e.target.id];\r\n        this.tasksList[e.target.id].init();\r\n    }\r\n\r\n    checkAnswer() {\r\n        let result = this.task.checkResult();\r\n        this.activeAttack = true;\r\n        if (result) {\r\n            this.solvedTasks++;\r\n            this.player.attack(this.attackType);\r\n            this.opponent.takeAttack(this.attackType);\r\n            setTimeout(() => {\r\n                this.task.correctAnswer();\r\n            }, 400);\r\n            setTimeout(() => {\r\n                this.opponent.healthBar.render(this.opponent.health);\r\n                this.activeAttack = false;\r\n                this.checkVictory();\r\n            }, 6000);\r\n        } else {\r\n            this.opponent.attack(this.attackType);\r\n            this.player.takeAttack(this.attackType);\r\n            setTimeout(() => {\r\n                this.task.wrongAnswer();\r\n            }, 400);\r\n            setTimeout(() => {\r\n                this.player.healthBar.render(this.player.health);\r\n                this.activeAttack = false;\r\n                this.checkLosing();\r\n            }, 6000);\r\n        }\r\n    }\r\n\r\n    checkVictory() {\r\n        if (!this.opponent.health) {\r\n            this.gameStatus = 'win';\r\n            this.battlefield.showFinalWindow(this.gameStatus);\r\n        }\r\n    }\r\n\r\n    checkLosing() {\r\n        if (!this.player.health) {\r\n            this.gameStatus = 'lose';\r\n            this.battlefield.showFinalWindow(this.gameStatus, this.level, this.solvedTasks);\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameController;","class Score {\r\n    constructor() {\r\n    }\r\n\r\n    refreshScore(player) {\r\n        if (!localStorage['stickman-wars']) {\r\n            localStorage['stickman-wars'] = JSON.stringify([player]);\r\n        } else {\r\n            let score = JSON.parse(localStorage['stickman-wars']);\r\n            score.push(player);\r\n            score.sort((a,b) => b.result - a.result);\r\n            score.length > 10 ? score.pop() : score;\r\n            localStorage['stickman-wars'] = JSON.stringify(score);\r\n        }\r\n    }\r\n\r\n    showScore(wrapper) {\r\n        wrapper.innerHTML = '';\r\n        if (!localStorage['stickman-wars']) {\r\n            wrapper.textContent = \"Score list is empty...\"\r\n        } else {\r\n            const scoreList = document.createElement('ol');\r\n            const topScore = JSON.parse(localStorage['stickman-wars']);\r\n            topScore.forEach(item => this.createScoreItem (item, scoreList));\r\n            wrapper.appendChild(scoreList);\r\n        }\r\n    }\r\n\r\n    createScoreItem(item, list) {\r\n        const scoreItem = document.createElement('li');\r\n        const itemWrapper = document.createElement('div');\r\n        const name = document.createElement('div');\r\n        const score = document.createElement('div');\r\n        itemWrapper.classList.add('score-item');\r\n        name.textContent = item.name;\r\n        score.textContent = item.result;\r\n        itemWrapper.appendChild(name);\r\n        itemWrapper.appendChild(score);\r\n        scoreItem.appendChild(itemWrapper);\r\n        list.appendChild(scoreItem);\r\n    }\r\n}\r\n\r\nexport default Score;","class StartPage {\r\n    constructor() {\r\n        this.startPage = document.getElementById('start-page');\r\n        this.menu = document.getElementById('main-menu');\r\n        this.scoreSection = document.getElementById('main-score-section');\r\n        this.scoreContainer = document.getElementById('main-score-container');\r\n        this.aboutSection = document.getElementById('main-about-section');\r\n        this.startPage.addEventListener('click', (e) => this.handleEvents(e));\r\n    }\r\n\r\n    init(score) {\r\n        this.score = score;\r\n    }\r\n\r\n    handleEvents(e) {\r\n        let id = e.target.id;\r\n        switch (id) {\r\n            case 'new-game':  \r\n                this.startGame();\r\n                break;\r\n            case 'about': \r\n                this.showGameDescription();\r\n                break;\r\n            case 'score': \r\n                this.demonstrateScore();\r\n                break;\r\n        }\r\n\r\n        if (e.target.classList.contains('close-button')) {\r\n            this.menu.classList.remove('hidden');\r\n            e.target.parentNode.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n    startGame() {\r\n        this.selectLocationPage = document.getElementById('location-select');\r\n        this.selectLocationPage.classList.remove('hidden');\r\n        this.startPage.classList.add('hidden');\r\n    }\r\n\r\n    showGameDescription() {\r\n        this.aboutSection.classList.remove('hidden');\r\n        this.menu.classList.add('hidden');\r\n    }\r\n\r\n    demonstrateScore() {\r\n        this.score.showScore(this.scoreContainer);\r\n        this.scoreSection.classList.remove('hidden');\r\n        this.menu.classList.add('hidden');\r\n    }\r\n}\r\n\r\nexport default new StartPage();","import Task from \"./Task\";\r\nimport { ANIMALS } from \"../Constants/animals\";\r\n\r\nclass AnimalsNamesTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.animalsArray = ANIMALS;\r\n        this.taskWrapper = document.getElementById('animals-task-field');\r\n        this.animalImageWrapper = document.getElementById('animal-image-wrapper');\r\n        this.answerInput = document.getElementById('animal-name-answer');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answerInput.value = '';\r\n        this.animalImageWrapper.innerHTML = '';\r\n        this.shuffleArray(this.animalsArray);\r\n        let index = Math.floor(Math.random() * this.animalsArray.length);\r\n        this.animal = this.animalsArray[index];\r\n        this.showAnimalImage();\r\n    }\r\n\r\n    showAnimalImage() {\r\n        let image = document.createElement('div');\r\n        image.classList.add('animal-image', this.animal.className);\r\n        this.animalImageWrapper.appendChild(image);\r\n    }\r\n\r\n    checkResult() {\r\n        let answer = this.answerInput.value.toLowerCase();\r\n        if (this.animal.name.indexOf(answer) !== -1) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const AnimalsNames = new AnimalsNamesTask();","import Task from \"./Task\";\r\nimport { COUNTRIES } from \"../Constants/countries\";\r\n\r\nclass CapitalsTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.countriesList = COUNTRIES;\r\n        this.taskWrapper = document.getElementById('capitals-task-field');\r\n        this.countrySpan = document.getElementById('country-for-capital-task');\r\n        this.answerInput = document.getElementById('capitals-answer');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.countrySpan.textContent = '';\r\n        this.answerInput.value = '';\r\n        let index = Math.floor(Math.random() * this.countriesList.length);\r\n        this.country = this.countriesList[index];\r\n        this.countrySpan.textContent = this.country.country[0].toUpperCase();\r\n    }\r\n\r\n    checkResult() {\r\n        let answer = this.answerInput.value.toLowerCase();\r\n        if (this.country.capital.indexOf(answer) !== -1) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const Capitals = new CapitalsTask();","import Task from \"./Task\";\r\nimport { CLASS_NAMES } from \"../Constants/carsLogoClassNames\";\r\n\r\nclass CarsLogoTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.classNamesArray = CLASS_NAMES;\r\n        this.taskWrapper = document.getElementById('carsLogo-task-field');\r\n        this.itemsWrapper = document.getElementById('cars-logo-wrapper');\r\n        this.carNameSpan = document.getElementById('car-logo-name');\r\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.itemsWrapper.innerHTML = '';\r\n        this.selectedItem = null;\r\n        this.shuffleArray(this.classNamesArray);\r\n        this.car = this.classNamesArray[0];\r\n        this.carNameSpan.textContent = this.classNamesArray[0].toUpperCase();\r\n        this.otherLogos = this.classNamesArray.slice(1, 3);\r\n        this.allItems = this.otherLogos.concat(this.car);\r\n        this.shuffleArray(this.allItems);\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        this.allItems.forEach((item) => {\r\n            let image = document.createElement('div');\r\n            image.classList.add(item);\r\n            this.itemsWrapper.appendChild(image);\r\n        })\r\n    }\r\n\r\n    selectImage(e) {\r\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\r\n            e.target.classList.add('selected-car-logo');\r\n            this.selectedItem ? this.selectedItem.classList.remove('selected-car-logo') : null;\r\n            this.selectedItem = e.target;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        if (this.selectedItem && this.selectedItem.classList.contains(this.car)) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const CarsLogo = new CarsLogoTask();","import Task from \"./Task\";\r\nimport { ANIMALS } from \"../Constants/animals\";\r\n\r\nclass ComparisionAnimalsTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.animalsArray = ANIMALS;\r\n        this.taskWrapper = document.getElementById('faster-animal-task-field');\r\n        this.itemsWrapper = document.getElementById('faster-animals-task-wrapper');\r\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.itemsWrapper.innerHTML = '';\r\n        this.selectedItem = null;\r\n        this.shuffleArray(this.animalsArray);\r\n        this.animals = this.animalsArray.slice(0, 2);\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        this.animals.forEach(item => {\r\n            let image = document.createElement('div');\r\n            image.classList.add(item.className);\r\n            this.itemsWrapper.appendChild(image);\r\n        })\r\n    }\r\n\r\n    selectImage(e) {\r\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\r\n            e.target.classList.add('selected-animal');\r\n            this.selectedItem ? this.selectedItem.classList.remove('selected-animal') : null;\r\n            this.selectedItem = e.target;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        this.animals.sort((a,b) => b.topSpeed - a.topSpeed);\r\n        if (this.selectedItem && this.selectedItem.classList.contains(this.animals[0].className)) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const FasterAnimals = new ComparisionAnimalsTask();","import Task from \"./Task\";\r\n\r\nclass ComparisionMathTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.taskWrapper = document.getElementById('comparision-task-field');\r\n        this.firstElement = document.getElementById('first-comparision-number');\r\n        this.answer = document.getElementById('comparision-operator');\r\n        this.secondElement = document.getElementById('second-comparision-number');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answer.value = '';\r\n        this.generateNumbers();\r\n    }\r\n\r\n    generateNumbers() {\r\n        this.firstNumber = Math.floor(Math.random() * 100);\r\n        this.secondNumber = Math.floor(Math.random() * 100);\r\n        this.firstElement.textContent = this.firstNumber;\r\n        this.secondElement.textContent = this.secondNumber;\r\n    }\r\n\r\n    checkResult() {\r\n        let operator = this.answer.value;\r\n        switch (operator) {\r\n            case '>': return (this.firstNumber > this.secondNumber);\r\n            case '<': return (this.firstNumber < this.secondNumber);\r\n            case '=': return (this.firstNumber === this.secondNumber);\r\n        };\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const ComparisionNumbers = new ComparisionMathTask();\r\n\r\n","import { WORD_LIST } from \"../Constants/CompoundWordList\"\r\nimport Task from \"./Task\";\r\n\r\nclass CompoundWordsTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.list = WORD_LIST;\r\n        this.taskWrapper = document.getElementById('compound-word-task-field');\r\n        this.startParts = document.getElementById('start-parts');\r\n        this.endParts = document.getElementById('end-parts');\r\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\r\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\r\n        this.startParts.addEventListener('drop', (e) => this.drop(e));\r\n        this.pairs = 4;\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.startParts.innerHTML = '';\r\n        this.endParts.innerHTML = '';\r\n        this.compoundWords = 0;\r\n        this.shuffleArray(this.list);\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        let words = this.list.slice(0, this.pairs);\r\n        let arrayOfEndParts = [];\r\n        words.forEach(item => {\r\n            let firstPart = document.createElement('div');\r\n            firstPart.classList.add('first-part');\r\n            firstPart.textContent = item.start;\r\n            firstPart.dataset.fullword = item.full;\r\n            this.startParts.appendChild(firstPart);\r\n            let secondPart = document.createElement('div');\r\n            secondPart.setAttribute('draggable', true);\r\n            secondPart.textContent = item.end;\r\n            secondPart.dataset.fullword = item.full;\r\n            secondPart.classList.add('second-part');\r\n            arrayOfEndParts.push(secondPart);\r\n        });\r\n        this.shuffleArray(arrayOfEndParts);\r\n        arrayOfEndParts.forEach(item => {\r\n            this.endParts.appendChild(item);\r\n        });\r\n    }\r\n\r\n    allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    dragStart(e) {\r\n        e.dataTransfer.setData(\"word\", e.target.dataset.fullword);\r\n        e.dataTransfer.setData(\"part\", e.target.textContent);\r\n        this.dragElement = e.target;\r\n    }\r\n\r\n    drop(e) {\r\n        if (e.target.classList.contains('first-part') && !e.target.classList.contains('wrongDrop') && !e.target.classList.contains('correctDrop')) {\r\n            e.target.textContent += e.dataTransfer.getData(\"part\");\r\n            this.dragElement.classList.add('invisible');\r\n            if (e.target.dataset.fullword === e.dataTransfer.getData(\"word\")) {\r\n                e.target.classList.add('correctDrop');\r\n                this.compoundWords++;\r\n            } else {\r\n                e.target.classList.add('wrongDrop');\r\n            }\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        if (this.compoundWords === this.pairs) {\r\n           return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const CompoundWords = new CompoundWordsTask();","import Task from \"./Task\";\r\nimport { COUNTRIES } from \"../Constants/countries\";\r\n\r\nclass CountriesTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.countriesList = COUNTRIES;\r\n        this.taskWrapper = document.getElementById('countries-task-field');\r\n        this.flagWrapper = document.getElementById('flag-wrapper');\r\n        this.answerInput = document.getElementById('country-answer');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answerInput.value = '';\r\n        this.flagWrapper.innerHTML = '';\r\n        let index = Math.floor(Math.random() * this.countriesList.length);\r\n        this.country = this.countriesList[index];\r\n        this.showFlag();\r\n    }\r\n\r\n    showFlag() {\r\n        let flag = document.createElement('div');\r\n        flag.classList.add('flag', this.country.className);\r\n        this.flagWrapper.appendChild(flag)\r\n    }\r\n\r\n    checkResult() {\r\n        let answer = this.answerInput.value.toLowerCase();\r\n        if (this.country.country.indexOf(answer) !== -1) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const Countries = new CountriesTask();","import Task from \"./Task\";\r\nimport { CLASS_NAMES } from \"../Constants/excessTaskClasses\";\r\n\r\nclass ExcessItemTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.classNamesArray = CLASS_NAMES;\r\n        this.taskWrapper = document.getElementById('excessItem-task-field');\r\n        this.itemsWrapper = document.getElementById('excessItem-wrapper');\r\n        this.itemsWrapper.addEventListener('click', (e) => this.selectImage(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.itemsWrapper.innerHTML = '';\r\n        this.selectedItem = null;\r\n        this.shuffleArray(this.classNamesArray);\r\n        this.shuffleArray(this.classNamesArray[0]);\r\n        this.shuffleArray(this.classNamesArray[1]);\r\n        this.excessItemClassName = this.classNamesArray[0][0];\r\n        this.similarItemsClassNames = this.classNamesArray[1].slice(0, 3);\r\n        this.allItems = this.similarItemsClassNames.concat(this.excessItemClassName);\r\n        this.shuffleArray(this.allItems);\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        this.allItems.forEach((item) => {\r\n            let image = document.createElement('div');\r\n            image.classList.add(item);\r\n            this.itemsWrapper.appendChild(image);\r\n        })\r\n    }\r\n\r\n    selectImage(e) {\r\n        if (e.target.parentNode === this.itemsWrapper && e.target !== this.selectedItem) {\r\n            e.target.classList.add('selected-excess-item');\r\n            this.selectedItem ? this.selectedItem.classList.remove('selected-excess-item') : null;\r\n            this.selectedItem = e.target;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        if (this.selectedItem && this.selectedItem.classList.contains(this.excessItemClassName)) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const ExcessItem = new ExcessItemTask();","import Task from \"./Task\";\r\n\r\nclass ListeningTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.synth = window.speechSynthesis;\r\n        this.taskWrapper = document.getElementById('listenning-task-field');\r\n        this.playButton = document.getElementById('listen-button');\r\n        this.answerInput = document.getElementById('listenning-answer');\r\n        this.playButton.addEventListener('click', () => this.speakWord());\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answerInput.value = '';\r\n        let index = Math.floor(Math.random() * this.vocabulary.length);\r\n        this.word = this.vocabulary[index].word;\r\n    }\r\n\r\n    speakWord() {\r\n        this.speech = new SpeechSynthesisUtterance(this.word);\r\n        this.voices = this.synth.getVoices();\r\n        this.speech.voice = this.voices[4];\r\n        this.synth.speak(this.speech);\r\n    }\r\n\r\n    checkResult() {\r\n        let answer = this.answerInput.value.toLowerCase();\r\n        if (answer === this.word) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const Listening = new ListeningTask();","import Task from \"./Task\";\r\n\r\nclass MathExerciseTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.result = document.getElementById('result');\r\n        this.operations = ['+', '-', '*', '/'];\r\n        this.taskWrapper = document.getElementById(\"math-task-field\");\r\n        this.firstElement = document.getElementById('first-number');\r\n        this.operator = document.getElementById('operation');\r\n        this.secondElement = document.getElementById('second-number');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.result.value = '';\r\n        this.generateOperation();\r\n    }\r\n\r\n    generateOperation() {\r\n        let index = Math.floor(Math.random() * this.operations.length);\r\n        this.generateNumbers(this.operations[index]);\r\n    }\r\n\r\n    generateNumbers(operation) {\r\n        switch (operation) {\r\n            case '+':  \r\n                this.firstNumber = Math.floor(Math.random() * 100);\r\n                this.secondNumber = Math.floor(Math.random() * 100);\r\n                this.answer = this.firstNumber + this.secondNumber;\r\n                break;\r\n            case '-': \r\n                this.secondNumber = Math.floor(Math.random() * 100);\r\n                this.firstNumber = Math.floor(Math.random() * 100) + this.secondNumber;\r\n                this.answer = this.firstNumber - this.secondNumber;\r\n                break;\r\n            case '/': \r\n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\r\n                this.firstNumber = this.secondNumber * (Math.floor(Math.random() * 10) + 1);\r\n                this.answer = this.firstNumber / this.secondNumber;\r\n                break;\r\n            case '*': \r\n                this.firstNumber = Math.floor(Math.random() * 100) + 1;\r\n                this.secondNumber = Math.floor(Math.random() * 10) + 1;\r\n                this.answer = this.firstNumber * this.secondNumber;\r\n                break;\r\n        }\r\n        this.firstElement.textContent = this.firstNumber;\r\n        this.operator.textContent = operation;\r\n        this.secondElement.textContent = this.secondNumber;\r\n    }\r\n\r\n    checkResult() {\r\n        if (+this.result.value === this.answer) {\r\n            return true;\r\n        } else return false\r\n    }\r\n}\r\n\r\nexport const MathTask = new MathExerciseTask();\r\n\r\n","import Task from \"./Task\";\r\nimport { SENTENCES } from \"../Constants/sentencesTask\"\r\n\r\nclass SentencesGrammarTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.sentensesArray = SENTENCES;\r\n        this.taskWrapper = document.getElementById('grammar-task-field');\r\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\r\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\r\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.shuffleArray(this.sentensesArray);\r\n        this.sentence = this.sentensesArray[0].split(' ');\r\n        this.arrayOfCells = [];\r\n        this.dragElement = null;\r\n        this.shuffleArray(this.sentence);\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        this.wordsContainer = document.createElement('div');\r\n        this.wordsContainer.classList.add('cells-container');\r\n        this.sentence.forEach(item => {\r\n            let cell = document.createElement('div');\r\n            cell.classList.add('reorder-cell');\r\n            cell.textContent = item;\r\n            this.wordsContainer.appendChild(cell);\r\n            cell.setAttribute('draggable', true);\r\n            this.arrayOfCells.push(cell);\r\n        });\r\n        this.taskWrapper.appendChild(this.wordsContainer);\r\n    }\r\n\r\n    allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    dragStart(e) {\r\n        this.dragElement = e.target;\r\n    }\r\n\r\n    drop(e) {\r\n        e.preventDefault();\r\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\r\n            let word = e.target.textContent;\r\n            e.target.textContent = this.dragElement.textContent;\r\n            this.dragElement.textContent = word;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        let playerAnswer = '';\r\n        this.arrayOfCells.forEach(item => playerAnswer += `${item.textContent} `);\r\n        let correctAnswer = this.sentensesArray[0];\r\n        if (playerAnswer.trim() === correctAnswer) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n\r\n    correctAnswer() {\r\n        super.correctAnswer();\r\n        this.wordsContainer.innerHTML = '';\r\n    }\r\n\r\n    wrongAnswer() {\r\n        super.wrongAnswer();\r\n        this.wordsContainer.innerHTML = '';\r\n    }\r\n}\r\n\r\nexport const GrammarTask = new SentencesGrammarTask();","import Task from \"./Task\";\r\n\r\nclass SortableLettersTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.taskWrapper = document.getElementById('reorder-task-field');\r\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\r\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\r\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.arrayOfCells = [];\r\n        this.dragElement = null;\r\n        let index = Math.floor(Math.random() * this.vocabulary.length);\r\n        this.word = this.vocabulary[index].word;\r\n        this.createField();\r\n    }\r\n\r\n    createField() {\r\n        this.wordContainer = document.createElement('div');\r\n        this.wordContainer.classList.add('cells-container');\r\n        let arrayOfLetters = this.word.split('');\r\n        this.shuffleArray(arrayOfLetters);\r\n        arrayOfLetters.forEach(item => {\r\n            let cell = document.createElement('div');\r\n            cell.classList.add('reorder-cell');\r\n            cell.textContent = item;\r\n            this.wordContainer.appendChild(cell);\r\n            cell.setAttribute('draggable', true);\r\n            this.arrayOfCells.push(cell);\r\n        });\r\n        this.taskWrapper.appendChild(this.wordContainer);\r\n    }\r\n\r\n    allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    dragStart(e) {\r\n        this.dragElement = e.target;\r\n    }\r\n\r\n    drop(e) {\r\n        e.preventDefault();\r\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\r\n            let letter = e.target.textContent;\r\n            e.target.textContent = this.dragElement.textContent;\r\n            this.dragElement.textContent = letter;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        let answer = '';\r\n        this.arrayOfCells.forEach(item => answer += item.textContent);\r\n        if (answer === this.word) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n\r\n    correctAnswer() {\r\n        super.correctAnswer();\r\n        this.wordContainer.innerHTML = '';\r\n    }\r\n\r\n    wrongAnswer() {\r\n        super.wrongAnswer();\r\n        this.wordContainer.innerHTML = '';\r\n    }\r\n}\r\n\r\nexport const SortableLetters = new SortableLettersTask();","import Task from \"./Task\";\r\n\r\nclass ReorderNumbersTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.taskWrapper = document.getElementById('sort-numbers-task-field');\r\n        this.taskWrapper.addEventListener('dragstart', (e) => this.dragStart(e));\r\n        this.taskWrapper.addEventListener('drop', (e) => this.drop(e));\r\n        this.taskWrapper.addEventListener('dragover', (e) => this.allowDrop(e));\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.arrayOfNumbers = [];\r\n        this.arrayOfCells = [];\r\n        this.dragElement = null;\r\n        this.fillArrayOfNumbers();\r\n        this.createField();\r\n    }\r\n\r\n    fillArrayOfNumbers() {\r\n        let i = 0;\r\n        for (i; i < 5; i++) {\r\n            let number = Math.floor(Math.random() * 100);\r\n            this.arrayOfNumbers.push(number);\r\n        }\r\n    }\r\n\r\n    createField() {\r\n        this.numbersContainer = document.createElement('div');\r\n        this.numbersContainer.classList.add('cells-container');\r\n        this.arrayOfNumbers.forEach(item => {\r\n            let cell = document.createElement('div');\r\n            cell.classList.add('reorder-cell');\r\n            cell.textContent = item;\r\n            this.numbersContainer.appendChild(cell);\r\n            cell.setAttribute('draggable', true);\r\n            this.arrayOfCells.push(cell);\r\n        });\r\n        this.taskWrapper.appendChild(this.numbersContainer);\r\n    }\r\n\r\n    allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    dragStart(e) {\r\n        this.dragElement = e.target;\r\n    }\r\n\r\n    drop(e) {\r\n        e.preventDefault();\r\n        if (e.target.classList.contains('reorder-cell') && this.dragElement.classList.contains('reorder-cell')) {\r\n            let number = e.target.textContent;\r\n            e.target.textContent = this.dragElement.textContent;\r\n            this.dragElement.textContent = number;\r\n        }\r\n    }\r\n\r\n    checkResult() {\r\n        let userAnswer = '';\r\n        let correctAnswer = '';\r\n        this.arrayOfCells.forEach(item => userAnswer += item.textContent);\r\n        this.arrayOfNumbers.sort((a,b) => a-b);\r\n        this.arrayOfNumbers.forEach(item => correctAnswer += item);\r\n        if (userAnswer === correctAnswer) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n\r\n    correctAnswer() {\r\n        super.correctAnswer();\r\n        this.numbersContainer.innerHTML = '';\r\n    }\r\n\r\n    wrongAnswer() {\r\n        super.wrongAnswer();\r\n        this.numbersContainer.innerHTML = '';\r\n    }\r\n}\r\n\r\nexport const ReorderNumbers = new ReorderNumbersTask();","import Task from \"./Task\";\r\n\r\nclass SquareTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.taskWrapper = document.getElementById('squareFigure-task-field');\r\n        this.figureWrapper = document.getElementById('figure-wrapper');\r\n        this.answerInput = document.getElementById('square-answer');\r\n        this.figuresList = ['rectangle-triangle', 'rectangle', 'isosceles-triangle', 'trapezium'];\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answerInput.value = '';\r\n        this.figureWrapper.innerHTML = '';\r\n        this.shuffleArray(this.figuresList);\r\n        let index = Math.floor(Math.random() * this.figuresList.length);\r\n        this.figure = this.figuresList[index];\r\n        this.generateSize();\r\n        this.createDescription()\r\n        this.showFigure();\r\n    }\r\n\r\n    generateSize() {\r\n        this.height = Math.floor(Math.random() * 6) + 5;\r\n        this.width = Math.floor(Math.random() * 10) + 5;\r\n        this.delta = Math.floor(Math.random() * 6) + 5;\r\n        while ((this.height % 2) || (this.width % 2) || (this.delta % 2)) {\r\n            this.delta = Math.floor(Math.random() * 5) + 5;\r\n            this.height = Math.floor(Math.random() * 5) + 5;\r\n            this.width = Math.floor(Math.random() * 5) + 10;\r\n        }\r\n        this.bottom = this.width + this.delta; \r\n    }\r\n\r\n    createDescription() {\r\n        this.description = document.createElement('p');\r\n        switch (this.figure) {\r\n            case 'rectangle': \r\n                this.description.textContent = `AB = ${this.height}, BC = ${this.width}`;\r\n                this.square = this.height * this.width;\r\n                break;\r\n            case 'rectangle-triangle': \r\n                this.description.textContent = `BC = ${this.height}, AC = ${this.width}`;\r\n                this.square = this.height * this.width / 2;\r\n                break;\r\n            case 'isosceles-triangle': \r\n                this.description.textContent = `AC = ${this.width}, BM = ${this.height}`;\r\n                this.square = this.height * this.width / 2;\r\n                break;   \r\n            case 'trapezium': \r\n                this.description.textContent = `AB = ${this.bottom}, DC = ${this.width}, DF = ${this.height}`;\r\n                this.square = this.height * (this.bottom + this.width) / 2;\r\n                break;   \r\n        }\r\n    }\r\n\r\n    showFigure() {\r\n        this.image = document.createElement('div');\r\n        this.image.classList.add('figure', this.figure);\r\n        this.figureWrapper.appendChild(this.image);\r\n        this.figureWrapper.appendChild(this.description);\r\n    }\r\n\r\n    checkResult() {\r\n        if (this.square === +this.answerInput.value) {\r\n            return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const Square = new SquareTask();","import { VOCABULARY } from \"../Constants/Vocabulary\";\r\n\r\nclass Task {\r\n    constructor() {\r\n        this.vocabulary = VOCABULARY;\r\n        this.taskSection = document.getElementById('task-field');\r\n        this.correctAnswerField = document.getElementById('correct-answer');\r\n        this.wrongAnswerField = document.getElementById('wrong-answer');\r\n        this.correctAnswerSound = document.getElementById('correct-answer-sound');\r\n        this.wrongAnswerSound = document.getElementById('wrong-answer-sound');\r\n    }\r\n\r\n    init() {\r\n        this.taskSection.classList.remove('hidden');\r\n        this.taskWrapper.classList.remove('hidden');\r\n    }\r\n    \r\n    shuffleArray(array) {\r\n        let i = array.length - 1\r\n        for (i; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n\r\n    correctAnswer() {\r\n        this.taskSection.classList.add('hidden');\r\n        this.taskWrapper.classList.add('hidden');\r\n        this.correctAnswerField.classList.remove('hidden');\r\n        this.correctAnswerSound.play();\r\n        setTimeout(() => {\r\n            this.correctAnswerField.classList.add('hidden');\r\n        }, 1000);\r\n    }\r\n\r\n    wrongAnswer() {\r\n        this.taskSection.classList.add('hidden');\r\n        this.taskWrapper.classList.add('hidden');\r\n        this.wrongAnswerField.classList.remove('hidden');\r\n        this.wrongAnswerSound.play();\r\n        setTimeout(() => {\r\n            this.wrongAnswerField.classList.add('hidden');\r\n        }, 1000);\r\n    }\r\n}\r\n\r\nexport default Task;","import Task from \"./Task\";\r\n\r\nclass TranslationTask extends Task {\r\n    constructor() {\r\n        super();\r\n        this.taskWrapper = document.getElementById('translation-task-field');\r\n        this.wordContainer = document.getElementById('word-for-translation');\r\n        this.answerInput = document.getElementById('translation-input');\r\n    }\r\n\r\n    init() {\r\n        super.init();\r\n        this.answerInput.value = '';\r\n        let index = Math.floor(Math.random() * this.vocabulary.length);\r\n        this.word = this.vocabulary[index].word;\r\n        this.translations = this.vocabulary[index].translation;\r\n        this.wordContainer.textContent =  this.word.toUpperCase();\r\n    }\r\n\r\n    checkResult() {\r\n        this.answer = this.answerInput.value.toLowerCase();\r\n        if (this.translations.indexOf(this.answer) !== -1) {\r\n           return true;\r\n        } else return false;\r\n    }\r\n}\r\n\r\nexport const Translation = new TranslationTask()","export { Listening } from \"./ListeningTask\";\r\nexport { CompoundWords } from \"./CompoundWordsTask\";\r\nexport { MathTask } from \"./MathTask\";\r\nexport { SortableLetters } from \"./SortableLettersTask\";\r\nexport { Translation } from \"./TranslationTask\";\r\nexport { Countries } from \"./CountriesTask\";\r\nexport { Square } from \"./SquareTask\";\r\nexport { Capitals } from \"./CapitalsTask\";\r\nexport { ComparisionNumbers } from \"./ComparisionMathTask\";\r\nexport { ExcessItem } from \"./ExcessItemTask\";\r\nexport { CarsLogo } from \"./CarsLogoTask\";\r\nexport { ReorderNumbers } from \"./SortableNumbersTask\";\r\nexport { GrammarTask } from \"./SentencesGrammarTask\";\r\nexport { FasterAnimals } from \"./ComparisionAnimalsTask\";\r\nexport { AnimalsNames } from \"./AnimalsNamesTask\";","import StartPage from \"./Scenes/StartPage\";\r\nimport GameConfig from \"./Controllers/GameConfig\";\r\nimport Character from \"./Character/Character\";\r\nimport Enemy from \"./Character/Enemy\";\r\nimport BattleFieldController from \"./Controllers/BattleFieldController\";\r\nimport GameController from \"./Controllers/GameController\";\r\nimport { CLASS_LIST } from \"./Constants/characterClassList\";\r\nimport NAMES from \"./Constants/namesCollection\";\r\nimport Score from \"./Scenes/Score\";\r\nimport * as Tasks from \"./Tasks/bundleTasks\";\r\nimport style from '../style/bundle.css';\r\n\r\n\r\nconst score = new Score();\r\nconst player = new Character();\r\nconst opponent = new Enemy(NAMES);\r\nconst battleField = new BattleFieldController(score);\r\nconst gameController = new GameController(battleField, opponent, Tasks);\r\nconst gameConfig = new GameConfig(player, CLASS_LIST, gameController);\r\n\r\ngameConfig.init();\r\n\r\nconst initApp = function () {\r\n    StartPage.init(score);\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", initApp());","// extracted by mini-css-extract-plugin"],"sourceRoot":""}